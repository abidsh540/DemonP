# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Wed Jun 18 02:51:48 2025
# -------------------------------
_ = lambda __ : __import__('marshal').loads(__import__('base64').b64decode(__[::-1]));exec((_)(b'='))